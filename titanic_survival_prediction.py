# -*- coding: utf-8 -*-
"""TITANIC SURVIVAL PREDICTION

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eK-29yu18rxWJpLFTDZhLH8v-z8QmJyC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
data = pd.read_csv("Titanic-Dataset.csv")

data.head()

data.info()

data.isnull().sum()

"""# Data Preprocessing"""

# Imputation using mode
numerical_features = ['Age']
for feature in numerical_features:
    data[feature].fillna(data[feature].mode()[0], inplace=True)

categorical_features = ['Cabin', 'Embarked']
for feature in categorical_features:
    data[feature].fillna(data[feature].mode()[0], inplace=True)


print(data.isnull().sum())

data.head(10)

##One hot encoding
categorical_features = ['Sex', 'Ticket', 'Cabin', 'Embarked']
data = pd.get_dummies(data, columns=categorical_features)

print(data.head(10))

"""# FEATURE SCALING"""

from sklearn.preprocessing import StandardScaler

numerical_features = ['Age', 'Fare']

scaler = StandardScaler()
data_scaled = data.copy()
data_scaled[numerical_features] = scaler.fit_transform(data_scaled[numerical_features])

data_scaled

print(data_scaled.shape)

"""# TRAIN TEST SPLIT AND MODEL EVALUATION"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

X = data_scaled.drop(columns=['Survived', 'Name'], axis=1)
y = data['Survived']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Evaluating the model
predictions = model.predict(X_test)
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)